\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+cp}{\PYGZsh{}ifndef PIPE\PYGZus{}MANAGER\PYGZus{}H}
\PYG{c+cp}{\PYGZsh{}define PIPE\PYGZus{}MANAGER\PYGZus{}H}

\PYG{c+cp}{\PYGZsh{}include}\PYG{+w}{ }\PYG{c+cpf}{\PYGZdq{}pch.h\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include}\PYG{+w}{ }\PYG{c+cpf}{\PYGZlt{}windows.h\PYGZgt{}}
\PYG{c+cp}{\PYGZsh{}include}\PYG{+w}{ }\PYG{c+cpf}{\PYGZlt{}string\PYGZgt{}}

\PYG{k}{class}\PYG{+w}{ }\PYG{n+nc}{PipeManager}
\PYG{p}{\PYGZob{}}
\PYG{k}{private}\PYG{o}{:}
\PYG{+w}{	}\PYG{n}{HANDLE}\PYG{+w}{ }\PYG{n}{pipeHandle}\PYG{p}{;}
\PYG{+w}{	}\PYG{n}{std}\PYG{o}{::}\PYG{n}{wstring}\PYG{+w}{ }\PYG{n+nf}{WidenString}\PYG{p}{(}\PYG{n}{std}\PYG{o}{::}\PYG{n}{string}\PYG{+w}{ }\PYG{n}{input}\PYG{p}{);}
\PYG{+w}{	}\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{ReadToNull}\PYG{p}{(}\PYG{n}{BYTE}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{outBuffer}\PYG{p}{);}
\PYG{+w}{	}\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n+nf}{Read}\PYG{p}{(}\PYG{n}{BYTE}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{outBuffer}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{bytesToRead}\PYG{p}{);}
\PYG{+w}{	}\PYG{n}{BYTE}\PYG{+w}{ }\PYG{n+nf}{Read}\PYG{p}{();}
\PYG{+w}{	}\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{Write}\PYG{p}{(}\PYG{k}{const}\PYG{+w}{ }\PYG{n}{BYTE}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{buffer}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{DWORD}\PYG{+w}{ }\PYG{n}{bufferLength}\PYG{p}{);}
\PYG{+w}{	}\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{Write}\PYG{p}{(}\PYG{n}{BYTE}\PYG{+w}{ }\PYG{n}{byte}\PYG{p}{);}

\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// A method to convert a 2D array of REALs (field) into a flat array of BYTEs for transmission over the pipe.}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}buffer\PYGZdq{}\PYGZgt{}An array of BYTEs, with length \PYGZlt{}c\PYGZgt{}sizeof(REAL) * fieldSize\PYGZlt{}/c\PYGZgt{}.\PYGZlt{}/param\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}field\PYGZdq{}\PYGZgt{}The 2D array of REALs to serialise.\PYGZlt{}/param\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}xLength\PYGZdq{}\PYGZgt{}The number of REALs to serialise in the x direction.\PYGZlt{}/param\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}yLength\PYGZdq{}\PYGZgt{}The number of REALs to serialise in the y direction.\PYGZlt{}/param\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}xOffset\PYGZdq{}\PYGZgt{}The x\PYGZhy{}index of the first REAL to be serialised.\PYGZlt{}/param\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}yOffset\PYGZdq{}\PYGZgt{}The y\PYGZhy{}index of the first REAL to be serialised.\PYGZlt{}/param\PYGZgt{}}
\PYG{+w}{	}\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{SerialiseField}\PYG{p}{(}\PYG{n}{BYTE}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{buffer}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{REAL}\PYG{o}{**}\PYG{+w}{ }\PYG{n}{field}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{xLength}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{yLength}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{xOffset}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{yOffset}\PYG{p}{);}

\PYG{k}{public}\PYG{o}{:}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// Constructor to connect to the named pipe}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}pipeName\PYGZdq{}\PYGZgt{}The name of the named pipe for communication with the frontend\PYGZlt{}/param\PYGZgt{}}
\PYG{+w}{	}\PYG{n}{PipeManager}\PYG{p}{(}\PYG{n}{std}\PYG{o}{::}\PYG{n}{string}\PYG{+w}{ }\PYG{n}{pipeName}\PYG{p}{);}

\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// Constructor accepting an already connected pipe\PYGZsq{}s handle}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}pipeHandle\PYGZdq{}\PYGZgt{}The handle of a connected pipe\PYGZlt{}/param\PYGZgt{}}
\PYG{+w}{	}\PYG{n}{PipeManager}\PYG{p}{(}\PYG{n}{HANDLE}\PYG{+w}{ }\PYG{n}{pipeHandle}\PYG{p}{);}

\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// Pipe manager destructor \PYGZhy{} disconnects from the named pipe then closes}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
\PYG{+w}{	}\PYG{o}{\PYGZti{}}\PYG{n}{PipeManager}\PYG{p}{();}

\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// Performs a handshake with the frontend.}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}A \PYGZlt{}c\PYGZgt{}bool\PYGZlt{}/c\PYGZgt{} indicating whether the handshake completed successfully.\PYGZlt{}/returns\PYGZgt{}}
\PYG{+w}{	}\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n+nf}{Handshake}\PYG{p}{(}\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{iMax}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{jMax}\PYG{p}{);}

\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// Performs a handshake with the frontend.}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}A std::pair, with the values of iMax and jMax (the simulation domain\PYGZsq{}s dimensions).\PYGZlt{}/returns\PYGZgt{}}
\PYG{+w}{	}\PYG{n}{std}\PYG{o}{::}\PYG{n}{pair}\PYG{o}{\PYGZlt{}}\PYG{k+kt}{int}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{o}{\PYGZgt{}}\PYG{+w}{ }\PYG{n}{Handshake}\PYG{p}{();}

\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// A subroutine to receive obstacles through the pipe, and convert them to a bool array.}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}obstacles\PYGZdq{}\PYGZgt{}The obstacles array to output to.\PYGZlt{}/param\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}xLength\PYGZdq{}\PYGZgt{}The number of cells in the x direction\PYGZlt{}/param\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}yLength\PYGZdq{}\PYGZgt{}The number of cells in the y direction\PYGZlt{}/param\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}A \PYGZlt{}c\PYGZgt{}bool\PYGZlt{}/c\PYGZgt{} indicating whether the action was successful.\PYGZlt{}/returns\PYGZgt{}}
\PYG{+w}{	}\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n+nf}{ReceiveObstacles}\PYG{p}{(}\PYG{k+kt}{bool}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{obstacles}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{xLength}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{yLength}\PYG{p}{);}

\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// Reads a byte from the pipe, and returns it}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}The single byte read from the pipe\PYGZlt{}/returns\PYGZgt{}}
\PYG{+w}{	}\PYG{n}{BYTE}\PYG{+w}{ }\PYG{n+nf}{ReadByte}\PYG{p}{();}

\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// Writes a single byte to the pipe}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}byte\PYGZdq{}\PYGZgt{}The byte to write\PYGZlt{}/param\PYGZgt{}}
\PYG{+w}{	}\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{SendByte}\PYG{p}{(}\PYG{n}{BYTE}\PYG{+w}{ }\PYG{n}{byte}\PYG{p}{);}

\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// Reads a \PYGZlt{}c\PYGZgt{}REAL\PYGZlt{}/c\PYGZgt{} data type from the pipe, assuming one has been sent.}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}The converted \PYGZlt{}c\PYGZgt{}REAL\PYGZlt{}/c\PYGZgt{} read from the pipe.\PYGZlt{}/returns\PYGZgt{}}
\PYG{+w}{	}\PYG{n}{REAL}\PYG{+w}{ }\PYG{n+nf}{ReadReal}\PYG{p}{();}

\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// Reads a \PYGZlt{}c\PYGZgt{}int\PYGZlt{}/c\PYGZgt{} data type from the pipe, assuming one has been sent.}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}The converted \PYGZlt{}c\PYGZgt{}int\PYGZlt{}/c\PYGZgt{} read from the pipe.\PYGZlt{}/returns\PYGZgt{}}
\PYG{+w}{	}\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n+nf}{ReadInt}\PYG{p}{();}

\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// Sends the contents of a field through the pipe.}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}field\PYGZdq{}\PYGZgt{}An array of pointers to the rows of the field.\PYGZlt{}/param\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}xLength\PYGZdq{}\PYGZgt{}The length in the x direction that will be transmitted.\PYGZlt{}/param\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}yLength\PYGZdq{}\PYGZgt{}The length in the y direction that will be transmitted.\PYGZlt{}/param\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}xOffset\PYGZdq{}\PYGZgt{}The x\PYGZhy{}index of the first value to be transmitted.\PYGZlt{}/param\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}yOffset\PYGZdq{}\PYGZgt{}The y\PYGZhy{}index of the first value to be transmitted.\PYGZlt{}/param\PYGZgt{}}
\PYG{+w}{	}\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{SendField}\PYG{p}{(}\PYG{n}{REAL}\PYG{o}{**}\PYG{+w}{ }\PYG{n}{field}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{xLength}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{yLength}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{xOffset}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{yOffset}\PYG{p}{);}

\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// Sends the contents of a field through the pipe.}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}field\PYGZdq{}\PYGZgt{}The field to transmit as a flattened array.\PYGZlt{}/param\PYGZgt{}}
\PYG{+w}{	}\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}numElements\PYGZdq{}\PYGZgt{}The number of elements in the field, \PYGZlt{}c\PYGZgt{}height * width\PYGZlt{}/c\PYGZgt{}.\PYGZlt{}/param\PYGZgt{}}
\PYG{+w}{	}\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{SendField}\PYG{p}{(}\PYG{n}{REAL}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{field}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{numElements}\PYG{p}{);}
\PYG{p}{\PYGZcb{};}

\PYG{c+cp}{\PYGZsh{}endif }\PYG{c+c1}{// !PIPE\PYGZus{}MANAGER\PYGZus{}H}
\end{Verbatim}
