\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+cp}{\PYGZsh{}include}\PYG{+w}{ }\PYG{c+cpf}{\PYGZdq{}ReductionKernels.cuh\PYGZdq{}}
\PYG{c+cp}{\PYGZsh{}include}\PYG{+w}{ }\PYG{c+cpf}{\PYGZlt{}cmath\PYGZgt{}}

\PYG{c+cp}{\PYGZsh{}ifdef \PYGZus{}\PYGZus{}INTELLISENSE\PYGZus{}\PYGZus{} }\PYG{c+c1}{// Allow intellisense to recognise cooperative groups}
\PYG{c+cp}{\PYGZsh{}define \PYGZus{}\PYGZus{}CUDACC\PYGZus{}\PYGZus{}}
\PYG{c+cp}{\PYGZsh{}endif }\PYG{c+c1}{// \PYGZus{}\PYGZus{}INTELLISENSE\PYGZus{}\PYGZus{}}
\PYG{c+cp}{\PYGZsh{}include}\PYG{+w}{ }\PYG{c+cpf}{\PYGZlt{}cooperative\PYGZus{}groups.h\PYGZgt{}}
\PYG{c+cp}{\PYGZsh{}ifdef \PYGZus{}\PYGZus{}INTELLISENSE\PYGZus{}\PYGZus{}}
\PYG{c+cp}{\PYGZsh{}undef \PYGZus{}\PYGZus{}CUDACC\PYGZus{}\PYGZus{}}
\PYG{c+cp}{\PYGZsh{}endif }\PYG{c+c1}{// \PYGZus{}\PYGZus{}INTELLISENSE\PYGZus{}\PYGZus{}}

\PYG{n}{namespace}\PYG{+w}{ }\PYG{n}{cg}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{cooperative\PYGZus{}groups}\PYG{p}{;}

\PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
\PYG{c+c1}{/// Computes the max of the elements in \PYGZlt{}paramref name=\PYGZdq{}sharedArray\PYGZdq{} /\PYGZgt{}. Processes the number of elements equal to \PYGZlt{}paramref name=\PYGZdq{}group\PYGZdq{} /\PYGZgt{}\PYGZsq{}s size.}
\PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}group\PYGZdq{}\PYGZgt{}The thread group of which the calling thread is a member.\PYGZlt{}/param\PYGZgt{}}
\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}sharedArray\PYGZdq{}\PYGZgt{}The array, in shared memory, to find the maximum of.\PYGZlt{}/param\PYGZgt{}}
\PYG{k+kt}{\PYGZus{}\PYGZus{}device\PYGZus{}\PYGZus{}}\PYG{+w}{ }\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n}{GroupMax}\PYG{p}{(}\PYG{n}{cg}\PYG{o}{::}\PYG{n}{thread\PYGZus{}group}\PYG{+w}{ }\PYG{n}{group}\PYG{p}{,}\PYG{+w}{ }\PYG{k}{volatile}\PYG{+w}{ }\PYG{n}{REAL}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{sharedArray}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{    }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{index}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{group}\PYG{p}{.}\PYG{n}{thread\PYGZus{}rank}\PYG{p}{();}
\PYG{+w}{    }\PYG{n}{REAL}\PYG{+w}{ }\PYG{n}{val}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{sharedArray}\PYG{p}{[}\PYG{n}{index}\PYG{p}{];}
\PYG{+w}{    }\PYG{k}{for}\PYG{+w}{ }\PYG{p}{(}\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{indexThreshold}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{group}\PYG{p}{.}\PYG{n}{size}\PYG{p}{()}\PYG{+w}{ }\PYG{o}{/}\PYG{+w}{ }\PYG{l+m+mi}{2}\PYG{p}{;}\PYG{+w}{ }\PYG{n}{indexThreshold}\PYG{+w}{ }\PYG{o}{\PYGZgt{}}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{;}\PYG{+w}{ }\PYG{n}{indexThreshold}\PYG{+w}{ }\PYG{o}{/=}\PYG{+w}{ }\PYG{l+m+mi}{2}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{index}\PYG{+w}{ }\PYG{o}{\PYGZlt{}}\PYG{+w}{ }\PYG{n}{indexThreshold}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}\PYG{+w}{ }\PYG{c+c1}{// Halve the number of threads each iteration}
\PYG{+w}{            }\PYG{n}{val}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{fmax}\PYG{p}{(}\PYG{n}{val}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{sharedArray}\PYG{p}{[}\PYG{n}{index}\PYG{+w}{ }\PYG{o}{+}\PYG{+w}{ }\PYG{n}{indexThreshold}\PYG{p}{]);}\PYG{+w}{ }\PYG{c+c1}{// Get the max of the thread\PYGZsq{}s own value and the one at index + indexThreshold}
\PYG{+w}{            }\PYG{n}{sharedArray}\PYG{p}{[}\PYG{n}{index}\PYG{p}{]}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{val}\PYG{p}{;}\PYG{+w}{ }\PYG{c+c1}{// Store the max into the shared array at the current index}
\PYG{+w}{        }\PYG{p}{\PYGZcb{}}
\PYG{+w}{        }\PYG{n}{group}\PYG{p}{.}\PYG{n}{sync}\PYG{p}{();}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}
\PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
\PYG{c+c1}{/// Computes the maximum of each column of a field. Requires xLength blocks, each of \PYGZlt{}c\PYGZgt{}field.pitch / sizeof(REAL)\PYGZlt{}/c\PYGZgt{} threads, and 1 REAL\PYGZsq{}s worth of shared memory per thread.}
\PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}partialMaxes\PYGZdq{}\PYGZgt{}An array of length equal to the number of rows, for outputting the maxes of each column.\PYGZlt{}/param\PYGZgt{}}
\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}field\PYGZdq{}\PYGZgt{}The input field.\PYGZlt{}/param\PYGZgt{}}
\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}yLength\PYGZdq{}\PYGZgt{}The length of a column.\PYGZlt{}/param\PYGZgt{}}
\PYG{k+kr}{\PYGZus{}\PYGZus{}global\PYGZus{}\PYGZus{}}\PYG{+w}{ }\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n}{ComputePartialMaxes}\PYG{p}{(}\PYG{n}{REAL}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{partialMaxes}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{PointerWithPitch}\PYG{o}{\PYGZlt{}}\PYG{n}{REAL}\PYG{o}{\PYGZgt{}}\PYG{+w}{ }\PYG{n}{field}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{yLength}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{    }\PYG{n}{cg}\PYG{o}{::}\PYG{n}{thread\PYGZus{}block}\PYG{+w}{ }\PYG{n}{threadBlock}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{cg}\PYG{o}{::}\PYG{n}{this\PYGZus{}thread\PYGZus{}block}\PYG{p}{();}
\PYG{+w}{    }\PYG{n}{REAL}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{colBase}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{REAL}\PYG{o}{*}\PYG{p}{)((}\PYG{k+kt}{char}\PYG{o}{*}\PYG{p}{)}\PYG{n}{field}\PYG{p}{.}\PYG{n}{ptr}\PYG{+w}{ }\PYG{o}{+}\PYG{+w}{ }\PYG{n+nb}{blockIdx}\PYG{p}{.}\PYG{n}{x}\PYG{+w}{ }\PYG{o}{*}\PYG{+w}{ }\PYG{n}{field}\PYG{p}{.}\PYG{n}{pitch}\PYG{p}{);}

\PYG{+w}{    }\PYG{c+c1}{// Perform copy to shared memory.}
\PYG{+w}{    }\PYG{c+c1}{// Put a 0 in shared if current index is greater than yLength (this catches index in pitch padding, or index \PYGZgt{} size of a row)}
\PYG{+w}{    }\PYG{k}{extern}\PYG{+w}{ }\PYG{k+kt}{\PYGZus{}\PYGZus{}shared\PYGZus{}\PYGZus{}}\PYG{+w}{ }\PYG{n}{REAL}\PYG{+w}{ }\PYG{n}{sharedArray}\PYG{p}{[];}

\PYG{+w}{    }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n+nb}{threadIdx}\PYG{p}{.}\PYG{n}{x}\PYG{+w}{ }\PYG{o}{\PYGZlt{}}\PYG{+w}{ }\PYG{n}{yLength}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}\PYG{+w}{ }\PYG{c+c1}{// the index of the thread is greater than the length of a column.}
\PYG{+w}{        }\PYG{n}{sharedArray}\PYG{p}{[}\PYG{n+nb}{threadIdx}\PYG{p}{.}\PYG{n}{x}\PYG{p}{]}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{o}{*}\PYG{p}{(}\PYG{n}{colBase}\PYG{+w}{ }\PYG{o}{+}\PYG{+w}{ }\PYG{n+nb}{threadIdx}\PYG{p}{.}\PYG{n}{x}\PYG{p}{);}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{+w}{    }\PYG{k}{else}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{n}{sharedArray}\PYG{p}{[}\PYG{n+nb}{threadIdx}\PYG{p}{.}\PYG{n}{x}\PYG{p}{]}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{REAL}\PYG{p}{)}\PYG{l+m+mi}{0}\PYG{p}{;}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{+w}{    }\PYG{n}{threadBlock}\PYG{p}{.}\PYG{n}{sync}\PYG{p}{();}

\PYG{+w}{    }\PYG{n}{GroupMax}\PYG{p}{(}\PYG{n}{threadBlock}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{sharedArray}\PYG{p}{);}

\PYG{+w}{    }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n+nb}{threadIdx}\PYG{p}{.}\PYG{n}{x}\PYG{+w}{ }\PYG{o}{==}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}\PYG{+w}{ }\PYG{c+c1}{// If the thread is the 0th in the block, store its result to global memory.}
\PYG{+w}{        }\PYG{n}{partialMaxes}\PYG{p}{[}\PYG{n+nb}{blockIdx}\PYG{p}{.}\PYG{n}{x}\PYG{p}{]}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{sharedArray}\PYG{p}{[}\PYG{l+m+mi}{0}\PYG{p}{];}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}

\PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
\PYG{c+c1}{/// Computes the final max from a given array of partial maxes. Requires 1 block of \PYGZlt{}paramref name=\PYGZdq{}xLength\PYGZdq{} /\PYGZgt{} threads, and 1 REAL\PYGZsq{}s worth of shared memory per thread.}
\PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}max\PYGZdq{}\PYGZgt{}The location to place the output.\PYGZlt{}/param\PYGZgt{}}
\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}partialMaxes\PYGZdq{}\PYGZgt{}An array of partial maxes, of size \PYGZlt{}paramref name=\PYGZdq{}xLength\PYGZdq{} /\PYGZgt{}.\PYGZlt{}/param\PYGZgt{}}
\PYG{k+kr}{\PYGZus{}\PYGZus{}global\PYGZus{}\PYGZus{}}\PYG{+w}{ }\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n}{ComputeFinalMax}\PYG{p}{(}\PYG{n}{REAL}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{max}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{REAL}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{partialMaxes}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{xLength}\PYG{p}{)}
\PYG{p}{\PYGZob{}}
\PYG{+w}{    }\PYG{n}{cg}\PYG{o}{::}\PYG{n}{thread\PYGZus{}block}\PYG{+w}{ }\PYG{n}{threadBlock}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{cg}\PYG{o}{::}\PYG{n}{this\PYGZus{}thread\PYGZus{}block}\PYG{p}{();}

\PYG{+w}{    }\PYG{k}{extern}\PYG{+w}{ }\PYG{k+kt}{\PYGZus{}\PYGZus{}shared\PYGZus{}\PYGZus{}}\PYG{+w}{ }\PYG{n}{REAL}\PYG{+w}{ }\PYG{n}{sharedMem}\PYG{p}{[];}

\PYG{+w}{    }\PYG{c+c1}{// Copy to shared memory again}
\PYG{+w}{    }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n+nb}{threadIdx}\PYG{p}{.}\PYG{n}{x}\PYG{+w}{ }\PYG{o}{\PYGZlt{}}\PYG{+w}{ }\PYG{n}{xLength}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{n}{sharedMem}\PYG{p}{[}\PYG{n+nb}{threadIdx}\PYG{p}{.}\PYG{n}{x}\PYG{p}{]}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{partialMaxes}\PYG{p}{[}\PYG{n+nb}{threadIdx}\PYG{p}{.}\PYG{n}{x}\PYG{p}{];}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{+w}{    }\PYG{k}{else}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{n}{sharedMem}\PYG{p}{[}\PYG{n+nb}{threadIdx}\PYG{p}{.}\PYG{n}{x}\PYG{p}{]}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{REAL}\PYG{p}{)}\PYG{l+m+mi}{0}\PYG{p}{;}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{+w}{    }\PYG{n}{threadBlock}\PYG{p}{.}\PYG{n}{sync}\PYG{p}{();}

\PYG{+w}{    }\PYG{n}{GroupMax}\PYG{p}{(}\PYG{n}{threadBlock}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{sharedMem}\PYG{p}{);}
\PYG{+w}{    }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n+nb}{threadIdx}\PYG{p}{.}\PYG{n}{x}\PYG{+w}{ }\PYG{o}{==}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}\PYG{+w}{ }\PYG{c+c1}{// Thread 0 stores the final element.}
\PYG{+w}{        }\PYG{o}{*}\PYG{n}{max}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{sharedMem}\PYG{p}{[}\PYG{l+m+mi}{0}\PYG{p}{];}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}

\PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
\PYG{c+c1}{/// Computes the sum of the elements in \PYGZlt{}paramref name=\PYGZdq{}sharedArray\PYGZdq{} /\PYGZgt{}. Processes the number of elements equal to \PYGZlt{}paramref name=\PYGZdq{}group\PYGZdq{} /\PYGZgt{}\PYGZsq{}s size.}
\PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}group\PYGZdq{}\PYGZgt{}The thread group of which the calling thread is a member.\PYGZlt{}/param\PYGZgt{}}
\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}sharedArray\PYGZdq{}\PYGZgt{}The array, in shared memory, to find the sum of.\PYGZlt{}/param\PYGZgt{}}
\PYG{k+kt}{\PYGZus{}\PYGZus{}device\PYGZus{}\PYGZus{}}\PYG{+w}{ }\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n}{GroupSum}\PYG{p}{(}\PYG{n}{cg}\PYG{o}{::}\PYG{n}{thread\PYGZus{}group}\PYG{+w}{ }\PYG{n}{group}\PYG{p}{,}\PYG{+w}{ }\PYG{k}{volatile}\PYG{+w}{ }\PYG{n}{REAL}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{sharedArray}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{    }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{index}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{group}\PYG{p}{.}\PYG{n}{thread\PYGZus{}rank}\PYG{p}{();}
\PYG{+w}{    }\PYG{k}{for}\PYG{+w}{ }\PYG{p}{(}\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{indexThreshold}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{group}\PYG{p}{.}\PYG{n}{size}\PYG{p}{()}\PYG{+w}{ }\PYG{o}{/}\PYG{+w}{ }\PYG{l+m+mi}{2}\PYG{p}{;}\PYG{+w}{ }\PYG{n}{indexThreshold}\PYG{+w}{ }\PYG{o}{\PYGZgt{}}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{;}\PYG{+w}{ }\PYG{n}{indexThreshold}\PYG{+w}{ }\PYG{o}{/=}\PYG{+w}{ }\PYG{l+m+mi}{2}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{index}\PYG{+w}{ }\PYG{o}{\PYGZlt{}}\PYG{+w}{ }\PYG{n}{indexThreshold}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}\PYG{+w}{ }\PYG{c+c1}{// Halve the number of threads each iteration}
\PYG{+w}{            }\PYG{n}{sharedArray}\PYG{p}{[}\PYG{n}{index}\PYG{p}{]}\PYG{+w}{ }\PYG{o}{+=}\PYG{+w}{ }\PYG{n}{sharedArray}\PYG{p}{[}\PYG{n}{index}\PYG{+w}{ }\PYG{o}{+}\PYG{+w}{ }\PYG{n}{indexThreshold}\PYG{p}{];}\PYG{+w}{ }\PYG{c+c1}{// Add the value at index + indexThreshold to the value at the current index.}
\PYG{+w}{        }\PYG{p}{\PYGZcb{}}
\PYG{+w}{        }\PYG{n}{group}\PYG{p}{.}\PYG{n}{sync}\PYG{p}{();}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}

\PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
\PYG{c+c1}{/// Computes the sum of each column of a field. Requires xLength blocks, each of \PYGZlt{}c\PYGZgt{}field.pitch / sizeof(REAL)\PYGZlt{}/c\PYGZgt{} threads, and 1 REAL\PYGZsq{}s worth of shared memory per thread.}
\PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}partialSums\PYGZdq{}\PYGZgt{}An array of length equal to the number of rows, for outputting the sums of each column.\PYGZlt{}/param\PYGZgt{}}
\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}field\PYGZdq{}\PYGZgt{}The input field.\PYGZlt{}/param\PYGZgt{}}
\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}yLength\PYGZdq{}\PYGZgt{}The length of a column.\PYGZlt{}/param\PYGZgt{}}
\PYG{k+kr}{\PYGZus{}\PYGZus{}global\PYGZus{}\PYGZus{}}\PYG{+w}{ }\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n}{ComputePartialSums}\PYG{p}{(}\PYG{n}{REAL}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{partialSums}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{PointerWithPitch}\PYG{o}{\PYGZlt{}}\PYG{n}{REAL}\PYG{o}{\PYGZgt{}}\PYG{+w}{ }\PYG{n}{field}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{yLength}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{    }\PYG{n}{cg}\PYG{o}{::}\PYG{n}{thread\PYGZus{}block}\PYG{+w}{ }\PYG{n}{threadBlock}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{cg}\PYG{o}{::}\PYG{n}{this\PYGZus{}thread\PYGZus{}block}\PYG{p}{();}
\PYG{+w}{    }\PYG{n}{REAL}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{colBase}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{REAL}\PYG{o}{*}\PYG{p}{)((}\PYG{k+kt}{char}\PYG{o}{*}\PYG{p}{)}\PYG{n}{field}\PYG{p}{.}\PYG{n}{ptr}\PYG{+w}{ }\PYG{o}{+}\PYG{+w}{ }\PYG{n+nb}{blockIdx}\PYG{p}{.}\PYG{n}{x}\PYG{+w}{ }\PYG{o}{*}\PYG{+w}{ }\PYG{n}{field}\PYG{p}{.}\PYG{n}{pitch}\PYG{p}{);}

\PYG{+w}{    }\PYG{c+c1}{// Perform copy to shared memory.}
\PYG{+w}{    }\PYG{c+c1}{// Put a 0 in shared if current index is greater than yLength (this catches index in pitch padding, or index \PYGZgt{} size of a row)}
\PYG{+w}{    }\PYG{k}{extern}\PYG{+w}{ }\PYG{k+kt}{\PYGZus{}\PYGZus{}shared\PYGZus{}\PYGZus{}}\PYG{+w}{ }\PYG{n}{REAL}\PYG{+w}{ }\PYG{n}{sharedArray}\PYG{p}{[];}

\PYG{+w}{    }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n+nb}{threadIdx}\PYG{p}{.}\PYG{n}{x}\PYG{+w}{ }\PYG{o}{\PYGZlt{}}\PYG{+w}{ }\PYG{n}{yLength}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}\PYG{+w}{ }\PYG{c+c1}{// the index of the thread is greater than the length of a column.}
\PYG{+w}{        }\PYG{n}{sharedArray}\PYG{p}{[}\PYG{n+nb}{threadIdx}\PYG{p}{.}\PYG{n}{x}\PYG{p}{]}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{o}{*}\PYG{p}{(}\PYG{n}{colBase}\PYG{+w}{ }\PYG{o}{+}\PYG{+w}{ }\PYG{n+nb}{threadIdx}\PYG{p}{.}\PYG{n}{x}\PYG{p}{);}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{+w}{    }\PYG{k}{else}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{n}{sharedArray}\PYG{p}{[}\PYG{n+nb}{threadIdx}\PYG{p}{.}\PYG{n}{x}\PYG{p}{]}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{REAL}\PYG{p}{)}\PYG{l+m+mi}{0}\PYG{p}{;}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{+w}{    }\PYG{n}{threadBlock}\PYG{p}{.}\PYG{n}{sync}\PYG{p}{();}

\PYG{+w}{    }\PYG{n}{GroupSum}\PYG{p}{(}\PYG{n}{threadBlock}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{sharedArray}\PYG{p}{);}

\PYG{+w}{    }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n+nb}{threadIdx}\PYG{p}{.}\PYG{n}{x}\PYG{+w}{ }\PYG{o}{==}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}\PYG{+w}{ }\PYG{c+c1}{// If the thread is the 0th in the block, store its result to global memory.}
\PYG{+w}{        }\PYG{n}{partialSums}\PYG{p}{[}\PYG{n+nb}{blockIdx}\PYG{p}{.}\PYG{n}{x}\PYG{p}{]}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{sharedArray}\PYG{p}{[}\PYG{l+m+mi}{0}\PYG{p}{];}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}

\PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
\PYG{c+c1}{/// Computes the final sum from a given array of partial sums. Requires 1 block of \PYGZlt{}paramref name=\PYGZdq{}xLength\PYGZdq{} /\PYGZgt{} threads, and 1 REAL\PYGZsq{}s worth of shared memory per thread.}
\PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}sum\PYGZdq{}\PYGZgt{}The location to place the output.\PYGZlt{}/param\PYGZgt{}}
\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}partialSums\PYGZdq{}\PYGZgt{}An array of partial sums, of size \PYGZlt{}paramref name=\PYGZdq{}xLength\PYGZdq{} /\PYGZgt{}.\PYGZlt{}/param\PYGZgt{}}
\PYG{k+kr}{\PYGZus{}\PYGZus{}global\PYGZus{}\PYGZus{}}\PYG{+w}{ }\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n}{ComputeFinalSum}\PYG{p}{(}\PYG{n}{REAL}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{sum}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{REAL}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{partialSums}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{xLength}\PYG{p}{)}
\PYG{p}{\PYGZob{}}
\PYG{+w}{    }\PYG{n}{cg}\PYG{o}{::}\PYG{n}{thread\PYGZus{}block}\PYG{+w}{ }\PYG{n}{threadBlock}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{cg}\PYG{o}{::}\PYG{n}{this\PYGZus{}thread\PYGZus{}block}\PYG{p}{();}

\PYG{+w}{    }\PYG{k}{extern}\PYG{+w}{ }\PYG{k+kt}{\PYGZus{}\PYGZus{}shared\PYGZus{}\PYGZus{}}\PYG{+w}{ }\PYG{n}{REAL}\PYG{+w}{ }\PYG{n}{sharedMem}\PYG{p}{[];}

\PYG{+w}{    }\PYG{c+c1}{// Copy to shared memory again}
\PYG{+w}{    }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n+nb}{threadIdx}\PYG{p}{.}\PYG{n}{x}\PYG{+w}{ }\PYG{o}{\PYGZlt{}}\PYG{+w}{ }\PYG{n}{xLength}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{n}{sharedMem}\PYG{p}{[}\PYG{n+nb}{threadIdx}\PYG{p}{.}\PYG{n}{x}\PYG{p}{]}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{partialSums}\PYG{p}{[}\PYG{n+nb}{threadIdx}\PYG{p}{.}\PYG{n}{x}\PYG{p}{];}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{+w}{    }\PYG{k}{else}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{n}{sharedMem}\PYG{p}{[}\PYG{n+nb}{threadIdx}\PYG{p}{.}\PYG{n}{x}\PYG{p}{]}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{REAL}\PYG{p}{)}\PYG{l+m+mi}{0}\PYG{p}{;}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{+w}{    }\PYG{n}{threadBlock}\PYG{p}{.}\PYG{n}{sync}\PYG{p}{();}

\PYG{+w}{    }\PYG{n}{GroupSum}\PYG{p}{(}\PYG{n}{threadBlock}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{sharedMem}\PYG{p}{);}
\PYG{+w}{    }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n+nb}{threadIdx}\PYG{p}{.}\PYG{n}{x}\PYG{+w}{ }\PYG{o}{==}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}\PYG{+w}{ }\PYG{c+c1}{// Thread 0 stores the final element.}
\PYG{+w}{        }\PYG{o}{*}\PYG{n}{sum}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{sharedMem}\PYG{p}{[}\PYG{l+m+mi}{0}\PYG{p}{];}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}

\PYG{n}{cudaError\PYGZus{}t}\PYG{+w}{ }\PYG{n}{FieldMax}\PYG{p}{(}\PYG{n}{REAL}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{max}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{cudaStream\PYGZus{}t}\PYG{+w}{ }\PYG{n}{streamToUse}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{PointerWithPitch}\PYG{o}{\PYGZlt{}}\PYG{n}{REAL}\PYG{o}{\PYGZgt{}}\PYG{+w}{ }\PYG{n}{field}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{xLength}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{yLength}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{    }\PYG{n}{cudaError\PYGZus{}t}\PYG{+w}{ }\PYG{n}{retVal}\PYG{p}{;}

\PYG{+w}{    }\PYG{n}{REAL}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{partialMaxes}\PYG{p}{;}
\PYG{+w}{    }\PYG{n}{retVal}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{cudaMalloc}\PYG{p}{(}\PYG{o}{\PYGZam{}}\PYG{n}{partialMaxes}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{xLength}\PYG{+w}{ }\PYG{o}{*}\PYG{+w}{ }\PYG{k}{sizeof}\PYG{p}{(}\PYG{n}{REAL}\PYG{p}{));}
\PYG{+w}{    }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{retVal}\PYG{+w}{ }\PYG{o}{!=}\PYG{+w}{ }\PYG{n}{cudaSuccess}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}\PYG{+w}{ }\PYG{c+c1}{// Return if there was an error in allocation}
\PYG{+w}{        }\PYG{k}{return}\PYG{+w}{ }\PYG{n}{retVal}\PYG{p}{;}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}

\PYG{+w}{    }\PYG{c+c1}{// Run the GPU kernel:}
\PYG{+w}{    }\PYG{n}{ComputePartialMaxes}\PYG{+w}{ }\PYG{n}{KERNEL\PYGZus{}ARGS}\PYG{p}{(}\PYG{n}{xLength}\PYG{p}{,}\PYG{+w}{ }\PYG{p}{(}\PYG{k+kt}{unsigned}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{field}\PYG{p}{.}\PYG{n}{pitch}\PYG{+w}{ }\PYG{o}{/}\PYG{+w}{ }\PYG{k}{sizeof}\PYG{p}{(}\PYG{n}{REAL}\PYG{p}{),}\PYG{+w}{ }\PYG{n}{field}\PYG{p}{.}\PYG{n}{pitch}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{streamToUse}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{partialMaxes}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{field}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{yLength}\PYG{p}{);}\PYG{+w}{ }\PYG{c+c1}{// 1 block per row. Number of threads is equal to column pitch, and each thread has 1 REAL worth of shared memory.}
\PYG{+w}{    }\PYG{n}{retVal}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{cudaStreamSynchronize}\PYG{p}{(}\PYG{n}{streamToUse}\PYG{p}{);}
\PYG{+w}{    }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{retVal}\PYG{+w}{ }\PYG{o}{!=}\PYG{+w}{ }\PYG{n}{cudaSuccess}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}\PYG{+w}{ }\PYG{c+c1}{// Skip the rest of the computation if there was an error}
\PYG{+w}{        }\PYG{k}{goto}\PYG{+w}{ }\PYG{n}{free}\PYG{p}{;}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}

\PYG{+w}{    }\PYG{n}{ComputeFinalMax}\PYG{+w}{ }\PYG{n}{KERNEL\PYGZus{}ARGS}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{xLength}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{xLength}\PYG{+w}{ }\PYG{o}{*}\PYG{+w}{ }\PYG{k}{sizeof}\PYG{p}{(}\PYG{n}{REAL}\PYG{p}{),}\PYG{+w}{ }\PYG{n}{streamToUse}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{max}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{partialMaxes}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{xLength}\PYG{p}{);}\PYG{+w}{ }\PYG{c+c1}{// 1 block to process all of the partial maxes, number of threads equal to number of partial maxes (xLength is also this)}
\PYG{+w}{    }\PYG{n}{retVal}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{cudaStreamSynchronize}\PYG{p}{(}\PYG{n}{streamToUse}\PYG{p}{);}


\PYG{n+nl}{free}\PYG{p}{:}
\PYG{+w}{    }\PYG{n}{cudaFree}\PYG{p}{(}\PYG{n}{partialMaxes}\PYG{p}{);}
\PYG{+w}{    }\PYG{k}{return}\PYG{+w}{ }\PYG{n}{retVal}\PYG{p}{;}
\PYG{p}{\PYGZcb{}}

\PYG{n}{cudaError\PYGZus{}t}\PYG{+w}{ }\PYG{n}{FieldSum}\PYG{p}{(}\PYG{n}{REAL}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{sum}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{cudaStream\PYGZus{}t}\PYG{+w}{ }\PYG{n}{streamToUse}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{PointerWithPitch}\PYG{o}{\PYGZlt{}}\PYG{n}{REAL}\PYG{o}{\PYGZgt{}}\PYG{+w}{ }\PYG{n}{field}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{xLength}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{yLength}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{    }\PYG{n}{cudaError\PYGZus{}t}\PYG{+w}{ }\PYG{n}{retVal}\PYG{p}{;}

\PYG{+w}{    }\PYG{n}{REAL}\PYG{o}{*}\PYG{+w}{ }\PYG{n}{partialSums}\PYG{p}{;}
\PYG{+w}{    }\PYG{n}{retVal}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{cudaMalloc}\PYG{p}{(}\PYG{o}{\PYGZam{}}\PYG{n}{partialSums}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{xLength}\PYG{+w}{ }\PYG{o}{*}\PYG{+w}{ }\PYG{k}{sizeof}\PYG{p}{(}\PYG{n}{REAL}\PYG{p}{));}
\PYG{+w}{    }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{retVal}\PYG{+w}{ }\PYG{o}{!=}\PYG{+w}{ }\PYG{n}{cudaSuccess}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}\PYG{+w}{ }\PYG{c+c1}{// Return if there was an error in allocation}
\PYG{+w}{        }\PYG{k}{return}\PYG{+w}{ }\PYG{n}{retVal}\PYG{p}{;}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}

\PYG{+w}{    }\PYG{c+c1}{// Run the GPU kernel:}
\PYG{+w}{    }\PYG{n}{ComputePartialSums}\PYG{+w}{ }\PYG{n}{KERNEL\PYGZus{}ARGS}\PYG{p}{(}\PYG{n}{xLength}\PYG{p}{,}\PYG{+w}{ }\PYG{p}{(}\PYG{k+kt}{unsigned}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{p}{)}\PYG{n}{field}\PYG{p}{.}\PYG{n}{pitch}\PYG{+w}{ }\PYG{o}{/}\PYG{+w}{ }\PYG{k}{sizeof}\PYG{p}{(}\PYG{n}{REAL}\PYG{p}{),}\PYG{+w}{ }\PYG{n}{field}\PYG{p}{.}\PYG{n}{pitch}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{streamToUse}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{partialSums}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{field}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{yLength}\PYG{p}{);}\PYG{+w}{ }\PYG{c+c1}{// 1 block per row. Number of threads is equal to column pitch, and each thread has 1 REAL worth of shared memory.}
\PYG{+w}{    }\PYG{n}{retVal}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{cudaStreamSynchronize}\PYG{p}{(}\PYG{n}{streamToUse}\PYG{p}{);}
\PYG{+w}{    }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{retVal}\PYG{+w}{ }\PYG{o}{!=}\PYG{+w}{ }\PYG{n}{cudaSuccess}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}\PYG{+w}{ }\PYG{c+c1}{// Skip the rest of the computation if there was an error}
\PYG{+w}{        }\PYG{k}{goto}\PYG{+w}{ }\PYG{n}{free}\PYG{p}{;}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}

\PYG{+w}{    }\PYG{n}{ComputeFinalSum}\PYG{+w}{ }\PYG{n}{KERNEL\PYGZus{}ARGS}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{xLength}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{xLength}\PYG{+w}{ }\PYG{o}{*}\PYG{+w}{ }\PYG{k}{sizeof}\PYG{p}{(}\PYG{n}{REAL}\PYG{p}{),}\PYG{+w}{ }\PYG{n}{streamToUse}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{sum}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{partialSums}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{xLength}\PYG{p}{);}\PYG{+w}{ }\PYG{c+c1}{// 1 block to process all of the partial sums, number of threads equal to number of partial sums (xLength is also this)}
\PYG{+w}{    }\PYG{n}{retVal}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{cudaStreamSynchronize}\PYG{p}{(}\PYG{n}{streamToUse}\PYG{p}{);}

\PYG{n+nl}{free}\PYG{p}{:}
\PYG{+w}{    }\PYG{n}{cudaFree}\PYG{p}{(}\PYG{n}{partialSums}\PYG{p}{);}
\PYG{+w}{    }\PYG{k}{return}\PYG{+w}{ }\PYG{n}{retVal}\PYG{p}{;}
\PYG{p}{\PYGZcb{}}
\end{Verbatim}
