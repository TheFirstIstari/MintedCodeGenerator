\begin{Verbatim}[commandchars=\\\{\}]
\PYG{k}{using}\PYG{+w}{ }\PYG{n+nn}{System}\PYG{p}{;}
\PYG{k}{using}\PYG{+w}{ }\PYG{n+nn}{System.Collections.Generic}\PYG{p}{;}
\PYG{k}{using}\PYG{+w}{ }\PYG{n+nn}{System.Windows.Navigation}\PYG{p}{;}

\PYG{k}{namespace}\PYG{+w}{ }\PYG{n+nn}{UserInterface.HelperClasses}
\PYG{p}{\PYGZob{}}
\PYG{+w}{    }\PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
\PYG{+w}{    }\PYG{c+c1}{/// A memory\PYGZhy{}efficient linear queue implementation.}
\PYG{+w}{    }\PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
\PYG{+w}{    }\PYG{c+c1}{/// \PYGZlt{}typeparam name=\PYGZdq{}T\PYGZdq{}\PYGZgt{}The type of the objects that will be stored in the queue.\PYGZlt{}/typeparam\PYGZgt{}}
\PYG{+w}{    }\PYG{k}{public}\PYG{+w}{ }\PYG{k}{class}\PYG{+w}{ }\PYG{n+nc}{ResizableLinearQueue}\PYG{o}{\PYGZlt{}}\PYG{n}{T}\PYG{o}{\PYGZgt{}}\PYG{+w}{ }\PYG{p}{:}\PYG{+w}{ }\PYG{n}{Queue}\PYG{o}{\PYGZlt{}}\PYG{n}{T}\PYG{o}{\PYGZgt{}}
\PYG{+w}{    }\PYG{p}{\PYGZob{}}

\PYG{+w}{        }\PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
\PYG{+w}{        }\PYG{c+c1}{/// Initialises the linear queue with a known start length.}
\PYG{+w}{        }\PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
\PYG{+w}{        }\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}startLength\PYGZdq{}\PYGZgt{}The initial length of the queue.\PYGZlt{}/param\PYGZgt{}}
\PYG{+w}{        }\PYG{k}{public}\PYG{+w}{ }\PYG{n+nf}{ResizableLinearQueue}\PYG{p}{(}\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{startLength}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{:}\PYG{+w}{ }\PYG{k}{base}\PYG{p}{(}\PYG{n}{startLength}\PYG{p}{)}
\PYG{+w}{        }\PYG{p}{\PYGZob{}}
\PYG{+w}{            }\PYG{n}{back}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m}{0}\PYG{p}{;}
\PYG{+w}{            }\PYG{n}{front}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m}{0}\PYG{p}{;}
\PYG{+w}{        }\PYG{p}{\PYGZcb{}}

\PYG{+w}{        }\PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
\PYG{+w}{        }\PYG{c+c1}{/// Initialises the linear queue with a default initial length of 1.}
\PYG{+w}{        }\PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
\PYG{+w}{        }\PYG{k}{public}\PYG{+w}{ }\PYG{n+nf}{ResizableLinearQueue}\PYG{p}{()}\PYG{+w}{ }\PYG{p}{:}\PYG{+w}{ }\PYG{k}{this}\PYG{p}{(}\PYG{l+m}{1}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}\PYG{+w}{ }\PYG{p}{\PYGZcb{}}\PYG{+w}{ }\PYG{c+c1}{//If no length is specified, start at 1.}

\PYG{+w}{        }\PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
\PYG{+w}{        }\PYG{c+c1}{/// Moves all the elements forwards in the array such the front of the queue is at position 0 and the rest are stored contiguously.}
\PYG{+w}{        }\PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
\PYG{+w}{        }\PYG{k}{private}\PYG{+w}{ }\PYG{k}{void}\PYG{+w}{ }\PYG{n+nf}{Reshuffle}\PYG{p}{()}
\PYG{+w}{        }\PYG{p}{\PYGZob{}}
\PYG{+w}{            }\PYG{k}{for}\PYG{+w}{ }\PYG{p}{(}\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{i}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{front}\PYG{p}{;}\PYG{+w}{ }\PYG{n}{i}\PYG{+w}{ }\PYG{o}{\PYGZlt{}}\PYG{+w}{ }\PYG{n}{length}\PYG{p}{;}\PYG{+w}{ }\PYG{n}{i}\PYG{o}{++}\PYG{p}{)}
\PYG{+w}{            }\PYG{p}{\PYGZob{}}
\PYG{+w}{                }\PYG{n}{array}\PYG{p}{[}\PYG{n}{i}\PYG{+w}{ }\PYG{o}{\PYGZhy{}}\PYG{+w}{ }\PYG{n}{front}\PYG{p}{]}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{array}\PYG{p}{[}\PYG{n}{i}\PYG{p}{];}\PYG{+w}{ }\PYG{c+c1}{//Reshuffle the array by copying each item back a certain number of spaces}
\PYG{+w}{            }\PYG{p}{\PYGZcb{}}
\PYG{+w}{            }\PYG{n}{back}\PYG{+w}{ }\PYG{o}{\PYGZhy{}=}\PYG{+w}{ }\PYG{n}{front}\PYG{p}{;}\PYG{+w}{ }\PYG{c+c1}{//Reshuffle the pointers}
\PYG{+w}{            }\PYG{n}{front}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m}{0}\PYG{p}{;}
\PYG{+w}{        }\PYG{p}{\PYGZcb{}}

\PYG{+w}{        }\PYG{k}{public}\PYG{+w}{ }\PYG{k}{override}\PYG{+w}{ }\PYG{k}{void}\PYG{+w}{ }\PYG{n+nf}{Enqueue}\PYG{p}{(}\PYG{n}{T}\PYG{+w}{ }\PYG{k}{value}\PYG{p}{)}
\PYG{+w}{        }\PYG{p}{\PYGZob{}}
\PYG{+w}{            }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{back}\PYG{+w}{ }\PYG{o}{==}\PYG{+w}{ }\PYG{n}{length}\PYG{p}{)}
\PYG{+w}{            }\PYG{p}{\PYGZob{}}
\PYG{+w}{                }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{front}\PYG{+w}{ }\PYG{o}{\PYGZgt{}}\PYG{+w}{ }\PYG{l+m}{0}\PYG{p}{)}\PYG{+w}{ }\PYG{c+c1}{//If the queue is full and the front is not at 0, there is unused space at the start of the array}
\PYG{+w}{                }\PYG{p}{\PYGZob{}}
\PYG{+w}{                    }\PYG{n}{Reshuffle}\PYG{p}{();}
\PYG{+w}{                }\PYG{p}{\PYGZcb{}}
\PYG{+w}{                }\PYG{k}{else}\PYG{+w}{ }\PYG{c+c1}{//If the queue is completely full (front pointer at 0), make the queue 2x longer (don\PYGZsq{}t reshuffle because this will have no effect)}
\PYG{+w}{                }\PYG{p}{\PYGZob{}}
\PYG{+w}{                    }\PYG{n}{length}\PYG{+w}{ }\PYG{o}{*=}\PYG{+w}{ }\PYG{l+m}{2}\PYG{p}{;}
\PYG{+w}{                    }\PYG{n}{Array}\PYG{p}{.}\PYG{n}{Resize}\PYG{p}{(}\PYG{k}{ref}\PYG{+w}{ }\PYG{n}{array}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{length}\PYG{p}{);}
\PYG{+w}{                }\PYG{p}{\PYGZcb{}}
\PYG{+w}{            }\PYG{p}{\PYGZcb{}}
\PYG{+w}{            }\PYG{n}{array}\PYG{p}{[}\PYG{n}{back}\PYG{p}{]}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{k}{value}\PYG{p}{;}\PYG{+w}{ }\PYG{c+c1}{//Put an item at the back and increase the back pointer}
\PYG{+w}{            }\PYG{n}{back}\PYG{o}{++}\PYG{p}{;}
\PYG{+w}{        }\PYG{p}{\PYGZcb{}}

\PYG{+w}{        }\PYG{k}{public}\PYG{+w}{ }\PYG{k}{override}\PYG{+w}{ }\PYG{n}{T}\PYG{+w}{ }\PYG{n+nf}{Dequeue}\PYG{p}{()}
\PYG{+w}{        }\PYG{p}{\PYGZob{}}
\PYG{+w}{            }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{IsEmpty}\PYG{p}{)}
\PYG{+w}{            }\PYG{p}{\PYGZob{}}
\PYG{+w}{                }\PYG{k}{throw}\PYG{+w}{ }\PYG{k}{new}\PYG{+w}{ }\PYG{n+nf}{InvalidOperationException}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}CircularQueue was empty when Dequeue was called\PYGZdq{}}\PYG{p}{);}
\PYG{+w}{            }\PYG{p}{\PYGZcb{}}
\PYG{+w}{            }\PYG{n}{T}\PYG{+w}{ }\PYG{n}{removedItem}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{array}\PYG{p}{[}\PYG{n}{front}\PYG{p}{];}
\PYG{+w}{            }\PYG{n}{front}\PYG{o}{++}\PYG{p}{;}

\PYG{+w}{            }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{back}\PYG{+w}{ }\PYG{o}{\PYGZhy{}}\PYG{+w}{ }\PYG{n}{front}\PYG{+w}{ }\PYG{o}{\PYGZlt{}}\PYG{+w}{ }\PYG{n}{length}\PYG{+w}{ }\PYG{o}{/}\PYG{+w}{ }\PYG{l+m}{4}\PYG{p}{)}\PYG{+w}{ }\PYG{c+c1}{//If only 1/4 of the array now is used, reshuffle it and halve the size}
\PYG{+w}{            }\PYG{p}{\PYGZob{}}
\PYG{+w}{                }\PYG{n}{Reshuffle}\PYG{p}{();}
\PYG{+w}{                }\PYG{n}{length}\PYG{+w}{ }\PYG{o}{/=}\PYG{+w}{ }\PYG{l+m}{2}\PYG{p}{;}
\PYG{+w}{                }\PYG{n}{Array}\PYG{p}{.}\PYG{n}{Resize}\PYG{p}{(}\PYG{k}{ref}\PYG{+w}{ }\PYG{n}{array}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{length}\PYG{p}{);}
\PYG{+w}{            }\PYG{p}{\PYGZcb{}}
\PYG{+w}{            }\PYG{k}{return}\PYG{+w}{ }\PYG{n}{removedItem}\PYG{p}{;}\PYG{+w}{ }\PYG{c+c1}{//Return the item that has been \PYGZdq{}removed\PYGZdq{}}
\PYG{+w}{        }\PYG{p}{\PYGZcb{}}

\PYG{+w}{        }\PYG{k}{public}\PYG{+w}{ }\PYG{k}{override}\PYG{+w}{ }\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n}{IsEmpty}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}\PYG{+w}{ }\PYG{n}{front}\PYG{+w}{ }\PYG{o}{==}\PYG{+w}{ }\PYG{n}{back}\PYG{p}{;}

\PYG{+w}{        }\PYG{k}{public}\PYG{+w}{ }\PYG{k}{override}\PYG{+w}{ }\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n}{IsFull}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}\PYG{+w}{ }\PYG{k}{false}\PYG{p}{;}\PYG{+w}{ }\PYG{c+c1}{// As the queue is resizable, it is never full. This is here for inheritance reasons.}

\PYG{+w}{        }\PYG{k}{public}\PYG{+w}{ }\PYG{k}{override}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{Count}\PYG{+w}{ }\PYG{o}{=\PYGZgt{}}\PYG{+w}{ }\PYG{n}{front}\PYG{+w}{ }\PYG{o}{\PYGZhy{}}\PYG{+w}{ }\PYG{n}{back}\PYG{p}{;}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}
\end{Verbatim}
