\begin{Verbatim}[commandchars=\\\{\}]
\PYG{k}{using}\PYG{+w}{ }\PYG{n+nn}{System}\PYG{p}{;}
\PYG{k}{using}\PYG{+w}{ }\PYG{n+nn}{System.Globalization}\PYG{p}{;}
\PYG{k}{using}\PYG{+w}{ }\PYG{n+nn}{System.Windows.Data}\PYG{p}{;}

\PYG{k}{namespace}\PYG{+w}{ }\PYG{n+nn}{UserInterface.Converters}
\PYG{p}{\PYGZob{}}
\PYG{+w}{    }\PYG{n+na}{[ValueConversion(typeof(float), typeof(string))]}
\PYG{+w}{    }\PYG{k}{public}\PYG{+w}{ }\PYG{k}{class}\PYG{+w}{ }\PYG{n+nc}{SignificantFigures}\PYG{+w}{ }\PYG{p}{:}\PYG{+w}{ }\PYG{n}{IValueConverter}
\PYG{+w}{    }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{c+c1}{/// \PYGZlt{}summary\PYGZgt{}}
\PYG{+w}{        }\PYG{c+c1}{/// Rounds an input value to a number of significant figures, returning a string to be displayed.}
\PYG{+w}{        }\PYG{c+c1}{/// \PYGZlt{}/summary\PYGZgt{}}
\PYG{+w}{        }\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}value\PYGZdq{}\PYGZgt{}The value, as a \PYGZlt{}see cref=\PYGZdq{}float\PYGZdq{}/\PYGZgt{}, to round.\PYGZlt{}/param\PYGZgt{}}
\PYG{+w}{        }\PYG{c+c1}{/// \PYGZlt{}param name=\PYGZdq{}parameter\PYGZdq{}\PYGZgt{}The number of significant figures to round to, as a \PYGZlt{}see cref=\PYGZdq{}string\PYGZdq{}/\PYGZgt{} representation of an int.\PYGZlt{}/param\PYGZgt{}}
\PYG{+w}{        }\PYG{c+c1}{/// \PYGZlt{}returns\PYGZgt{}The rounded value, cast from a \PYGZlt{}see cref=\PYGZdq{}string\PYGZdq{}/\PYGZgt{} to an \PYGZlt{}see cref=\PYGZdq{}object\PYGZdq{}/\PYGZgt{}.\PYGZlt{}/returns\PYGZgt{}}
\PYG{+w}{        }\PYG{k}{public}\PYG{+w}{ }\PYG{k+kt}{object}\PYG{+w}{ }\PYG{n+nf}{Convert}\PYG{p}{(}\PYG{k+kt}{object}\PYG{+w}{ }\PYG{k}{value}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{Type}\PYG{+w}{ }\PYG{n}{targetType}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{object}\PYG{+w}{ }\PYG{n}{parameter}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{CultureInfo}\PYG{+w}{ }\PYG{n}{culture}\PYG{p}{)}
\PYG{+w}{        }\PYG{p}{\PYGZob{}}
\PYG{+w}{            }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{k}{value}\PYG{+w}{ }\PYG{k}{is}\PYG{+w}{ }\PYG{n}{not}\PYG{+w}{ }\PYG{k+kt}{float}\PYG{+w}{ }\PYG{o}{||}\PYG{+w}{ }\PYG{o}{!}\PYG{k+kt}{int}\PYG{p}{.}\PYG{n}{TryParse}\PYG{p}{((}\PYG{k+kt}{string}\PYG{p}{)}\PYG{n}{parameter}\PYG{p}{,}\PYG{+w}{ }\PYG{k}{out}\PYG{+w}{ }\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{iParameter}\PYG{p}{))}\PYG{+w}{ }\PYG{c+c1}{// Input validation}
\PYG{+w}{            }\PYG{p}{\PYGZob{}}
\PYG{+w}{                }\PYG{k}{return}\PYG{+w}{ }\PYG{l+s}{\PYGZdq{}\PYGZdq{}}\PYG{p}{;}
\PYG{+w}{            }\PYG{p}{\PYGZcb{}}

\PYG{+w}{            }\PYG{k}{return}\PYG{+w}{ }\PYG{p}{((}\PYG{k+kt}{float}\PYG{p}{)}\PYG{k}{value}\PYG{p}{).}\PYG{n}{ToString}\PYG{p}{(}\PYG{l+s}{\PYGZdl{}\PYGZdq{}G\PYGZob{}iParameter\PYGZcb{}\PYGZdq{}}\PYG{p}{);}\PYG{+w}{ }\PYG{c+c1}{// Use the ToString method with the number of SF as the parameter to it.}
\PYG{+w}{        }\PYG{p}{\PYGZcb{}}

\PYG{+w}{        }\PYG{k}{public}\PYG{+w}{ }\PYG{k+kt}{object}\PYG{+w}{ }\PYG{n+nf}{ConvertBack}\PYG{p}{(}\PYG{k+kt}{object}\PYG{+w}{ }\PYG{k}{value}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{Type}\PYG{+w}{ }\PYG{n}{targetType}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{object}\PYG{+w}{ }\PYG{n}{parameter}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{CultureInfo}\PYG{+w}{ }\PYG{n}{culture}\PYG{p}{)}
\PYG{+w}{        }\PYG{p}{\PYGZob{}}
\PYG{+w}{            }\PYG{k}{throw}\PYG{+w}{ }\PYG{k}{new}\PYG{+w}{ }\PYG{n+nf}{InvalidOperationException}\PYG{p}{(}\PYG{l+s}{\PYGZdq{}Values cannot be converted back once they have been rounded.\PYGZdq{}}\PYG{p}{);}
\PYG{+w}{        }\PYG{p}{\PYGZcb{}}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}
\end{Verbatim}
